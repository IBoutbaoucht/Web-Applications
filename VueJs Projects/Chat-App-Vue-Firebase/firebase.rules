rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isGroupMember(groupId) {
      return request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
    }
    
    function isGroupAdmin(groupId) {
      return request.auth.uid == get(/databases/$(database)/documents/groups/$(groupId)).data.admin;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update: if isOwner(userId);
      allow delete: if false; // Don't allow user deletion
    }
    
    // Private chats
    match /chats/{chatId} {
      allow read, write: if isSignedIn() && 
                           request.auth.uid in chatId.split('_');
      
      // Messages in private chats
      match /messages/{messageId} {
        allow read: if isSignedIn() && 
                      request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if isSignedIn() && 
                        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
                        request.resource.data.senderId == request.auth.uid;
        allow update, delete: if isSignedIn() && 
                                request.auth.uid == resource.data.senderId;
      }
      
      // Typing indicators
      match /typing/{userId} {
        allow read: if isSignedIn() && 
                      request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow write: if isSignedIn() && 
                       request.auth.uid == userId;
      }
    }
    
    // Group chats
    match /groups/{groupId} {
      allow read: if isSignedIn() && 
                    request.auth.uid in resource.data.members;
      allow create: if isSignedIn() && 
                      request.resource.data.createdBy == request.auth.uid &&
                      request.resource.data.admin == request.auth.uid &&
                      request.auth.uid in request.resource.data.members;
      allow update: if isSignedIn() && 
                      (isGroupAdmin(groupId) || 
                       (request.auth.uid in resource.data.members && 
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActivity'])));
      allow delete: if isSignedIn() && 
                      isGroupAdmin(groupId) && 
                      resource.data.createdBy == request.auth.uid;
      
      // Messages in group chats
      match /messages/{messageId} {
        allow read: if isSignedIn() && 
                      request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members;
        allow create: if isSignedIn() && 
                        request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.members &&
                        request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isSignedIn() && 
                                (request.auth.uid == resource.data.authorId || 
                                 isGroupAdmin(groupId));
      }
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && 
                    request.auth.uid == resource.data.recipientId;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
                      request.auth.uid == resource.data.recipientId;
      allow delete: if isSignedIn() && 
                      request.auth.uid == resource.data.recipientId;
    }
  }
}
